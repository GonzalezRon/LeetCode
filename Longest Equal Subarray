You are given a 0-indexed integer array nums and an integer k.

A subarray is called equal if all of its elements are equal. Note that the empty subarray is an equal subarray.

Return the length of the longest possible equal subarray after deleting at most k elements from nums.

A subarray is a contiguous, possibly empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,3,2,3,1,3], k = 3
Output: 3
Explanation: It's optimal to delete the elements at index 2 and index 4.
After deleting them, nums becomes equal to [1, 3, 3, 3].
The longest equal subarray starts at i = 1 and ends at j = 3 with length equal to 3.
It can be proven that no longer equal subarrays can be created.





/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var RRlongestEqualSubarray = function(nums, k) {
    const map = new Map()


    for(let i = 0; i < nums.length; i++){ 
        if(map.has(nums[i])){
            map.get(nums[i]).push(i)
        }else{
            map.set(nums[i],[i])
        }
    }                       
                            // Array value format for Map() Data Structure
                            // 1[0,4],3[1,3,5],2[2] --> equal subarrays
    let result = 1 
    for (const [key, values] of map){ 
        let left = 0, right = 0, counter = 0
        while(left <= right && right < values.length ){
            if(counter<= k){  
            result = Math.max(result, values[right] - values[left] + 1 - counter)
                            // res = length of 'longest equal subarray'
            right += 1 
            counter += (values[right] - values[right - 1] - 1)
                            // counts numbers between values of the subarray 
                            // deterimines how many elements are being removed
            }else{ 
                left += 1
                counter -= (values[left] - values[left-1] - 1) 
                            // calculate number of removed elements from counter 
            }
        }
    }
return result               // return Math.max length of longest equal subarray
};











var longestEqualSubarray = function(nums, k) {
    let freq = new Map();
    let maxLen = 0;
    let i = 0;
    let res = 0;

    for (let j = 0; j < nums.length; j++) {
        if (!freq.has(nums[j])) {
            freq.set(nums[j], 1);
        } else {
            freq.set(nums[j], freq.get(nums[j]) + 1);
        }   
                                        // counter format of Map() Data Structure 
        maxLen = Math.max(maxLen, freq.get(nums[j]));
                                         // worst case be less maxLen+k then start removing from i 
        while (maxLen + k < j - i + 1) { // AWA: maxlength + k must be less than the whole + 1
                                        // example [1,3,2,1,1]-> when k = 1 [2,1,1] .: return 2  
            freq.set(nums[i], freq.get(nums[i]) - 1);
            i++;
                                        // i moves up in respect to maxLen + k 
        }
        res = Math.max(res, maxLen);
    }

    return res;
};




