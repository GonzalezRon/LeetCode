You have a bomb to defuse, and your time is running out! Your informer will provide you with a circular array code of length of n and a key k.

To decrypt the code, you must replace every number. All the numbers are replaced simultaneously.

If k > 0, replace the ith number with the sum of the next k numbers.
If k < 0, replace the ith number with the sum of the previous k numbers.
If k == 0, replace the ith number with 0.
As code is circular, the next element of code[n-1] is code[0], and the previous element of code[0] is code[n-1].

Example 1:

Input: code = [5,7,1,4], k = 3
Output: [12,10,16,13]
Explanation: Each number is replaced by the sum of the next 3 numbers. The decrypted code is [7+1+4, 1+4+5, 4+5+7, 5+7+1]. Notice that the numbers wrap around.
Example 2:

Input: code = [1,2,3,4], k = 0
Output: [0,0,0,0]
Explanation: When k is zero, the numbers are replaced by 0. 
Example 3:

Input: code = [2,4,9,3], k = -2
Output: [12,5,6,13]
Explanation: The decrypted code is [3+9, 2+3, 4+2, 9+4]. Notice that the numbers wrap around again. If k is negative, the sum is of the previous numbers.







var decrypt = function(code, k) {

    const set = new Array(code.length).fill(0)
    if(k === 0) return set             

    else if(k > 0 ){                            
        let sum = 0;  
                                    //sliding window approach: change the first element 
        for(let i = 1; i <= k; i++){  // with respect to k   
            sum += code[i]            
        }   
        set[0] = sum                 // first element becomes sum, and sum is used in loop 
            
        for(let j = 1; j < code.length; j++){   // example code.len = 4 and k = 3 
            const addIndex = (j + k) % code.length    // modulo rotates window index back to 0 or 1 or 2 etc..  
            const removeIndex = j                     // remove the element at j 
            sum += code[addIndex] - code[removeIndex]   // previous sum is equated 
            set[j] = sum                              // all refrenced change the zero'd set 

        }
    }
    else{
        let sum = 0                                     // example code = [2,4,9,3] & k = -2
                                                        // k is always less than zero here 
        for(let i = code.length -2; i > code.length + k - 2; i--){ // when k = -2 --> ( 2 > 0 )  
            sum+= code[i]                       //  gather sum of the first elements from 2 to 1 = 13 
           
        }
        set[code.length-1] = sum               //   last position in set  = 13 
        
        for(let m = code.length -2; m >= 0; m--){ // m = 2; 2>= 0; m-- // minus two excluding 'code.len-1'
            const addIndex = (m + k )              //2 + k when k = -2 
            const remIndex = m                     // m = 2 
            sum+= code.at(addIndex)-code[remIndex] //code.at(0) - code[2]   --> .at() = [] 
            set[m] = sum                           // therefore 2 - 9 = - 7 --> set[2] = -7 + 13 = 6  
        }
    }
    return set
};


var decrypt = function (code, k) {
    const decrypted = new Array(code.length).fill(0);
                                                    // Iterate over each element and visit the conditions 
    for (let i = 0; i < code.length; i++) {        

        if (k > 0) {
            for (let j = 1; j <= k; j++) {
                                                    // Iterate over the next k elements
                //console.log("i", i, 'j', j, 'decyd: ', decrypted, 'code[etc]: ',code[(i + j) % code.length ])
                decrypted[i] += code[(i + j) % code.length];
            // ' i ' is 0 for the loop w/ respect to k 
                                                    // Sum the next k elements, wrap around if needed
            }
        } else if (k < 0) {
            for (let j = -1; j >= k; j--) {
                                                    // Iterate over the previous k elements
                decrypted[i] += code[(i + j + code.length) % code.length];
                                                    // Sum the calculation, wrap around if needed
            }
        }


    }

    return decrypted;
};
