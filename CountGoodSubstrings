A string is good if there are no repeated characters.

Given a string s​​​​​, return the number of good substrings of length three in s​​​​​​.

Note that if there are multiple occurrences of the same substring, every occurrence should be counted.

A substring is a contiguous sequence of characters in a string.

 

Example 1:

Input: s = "xyzzaz"
Output: 1
Explanation: There are 4 substrings of size 3: "xyz", "yzz", "zza", and "zaz". 
The only good substring of length 3 is "xyz".
Example 2:

Input: s = "aababcabc"
Output: 4
Explanation: There are 7 substrings of size 3: "aab", "aba", "bab", "abc", "bca", "cab", and "abc".
The good substrings are "abc", "bca", "cab", and "abc".



const XcountGoodSubStrings = function(s){
    let mapWindow = new Map();
    // two variables set to 0 
    let right = 0
    let count = 0
    // return count of sets of 3 unique letters 

    for (let left = 0; left < s.length; left++){ 
        //left edge of Window
        while(right < s.length && (right - left ) < 3 && !mapWindow.has(s[right])){
            //right edge must be less than 
            mapWindow.add(s[right])
            right++ 
        }
        if(mapWindow.size === 3){
            goodCount++
        }
        mapWindow.delete(s[left])
    }
    return count++
    
}


const XXcountGoodSubstrings =(s)=>{
    let count = 0 
    let end = 0 

    let set = new Set()
    
    for(let start = 0; start< s.length; start++){
        
        while(end < s.length && (end - start) < 3 && !set.has(s[end])){
            set.add(s[end])
            end++
        }
        if(set.size === 3){
            count++
        }
        // after checking size remove the first element to slide window
        set.delete(s[start])
    }
    return count; 
}





const countGoodSubstrings = (s) => { 
    let k  = 3 // window length 
    let count = 0

    for(let edge = 2; edge < s.length; edge++){ // add 1 to edge 
        if(myUniqueFunct(s.substring(i - 2, i + 1))){ //(0,3)--> (1,4) --> (2,5) etc 
            count++; // if true add to count
        }
    }

    //helper function: 
    const myUniqueFunct=(s)=>{
        const set = new Set(...s)
        return set.size > 2 
    }
    return count
}
